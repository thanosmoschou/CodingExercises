/*
The float property is used for positioning and formatting content e.g. let an image float left to the text in a container.

The float property can have one of the following values:

left - The element floats to the left of its container
right - The element floats to the right of its container
none - The element does not float (will be displayed just where it occurs in the text). This is default
inherit - The element inherits the float value of its parent
In its simplest use, the float property can be used to wrap text around images.

Normally div elements will be displayed on top of each other. However, if we use float: left we can let elements float next to each other

When we use the float property, and we want the next element below (not on right or left), we will have to use the clear property.

The clear property specifies what should happen with the element that is next to a floating element.

The clear property can have one of the following values:

none - The element is not pushed below left or right floated elements. This is default
left - The element is pushed below left floated elements
right - The element is pushed below right floated elements
both - The element is pushed below both left and right floated elements
inherit - The element inherits the clear value from its parent
When clearing floats, you should match the clear to the float: If an element is floated to the left, 
then you should clear to the left. Your floated element will continue to float, but the cleared element will appear below it on the web page.

If a floated element is taller than the containing element, it will "overflow" outside of its container. We can then add a clearfix hack to solve this problem
.clearfix {
  overflow: auto;
}

The overflow: auto clearfix works well as long as you are able to keep control of your margins and padding 
(else you might see scrollbars). The new, modern clearfix hack however, is safer to use, and the following code is used for most webpages

.clearfix::after {
  content: "";
  clear: both;
  display: table;
}

What is box-sizing?

You can easily create three floating boxes side by side. However, when you add something that enlarges the width of each box 
(e.g. padding or borders), the box will break. The box-sizing property allows us to include the padding and border in the box's 
total width (and height), making sure that the padding stays inside of the box and that it does not break.

With the float property, it is easy to float boxes of content side by side

* {
  box-sizing: border-box;
}

.box {
  float: left;
  width: 33.33%; three boxes (use 25% for four, and 50% for two, etc)
  padding: 50px; if you want space between the images 
}

You can also use float with a list of hyperlinks to create a horizontal menu:


*/

img{
    height: 300px;
    width: 300px;
    float: right;
}

/*
Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.

Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not.

Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements.

One common use for display: inline-block is to display list items horizontally instead of vertically. 

*/

