/*
Flexbox Elements
To start using the Flexbox model, you need to first define a flex container.

The flex container becomes flexible by setting the display property to flex:

The flex container properties are:

flex-direction
flex-wrap
flex-flow
justify-content
align-items
align-content

The flex-direction property defines in which direction the container wants to stack the flex items.
The column value stacks the flex items vertically (from top to bottom):
The column-reverse value stacks the flex items vertically (but from bottom to top):
The row value stacks the flex items horizontally (from left to right):
The row-reverse value stacks the flex items horizontally (but from right to left):

The flex-wrap property specifies whether the flex items should wrap or not.
The wrap value specifies that the flex items will wrap if necessary:
The nowrap value specifies that the flex items will not wrap (this is default):
The wrap-reverse value specifies that the flexible items will wrap if necessary, in reverse order:

The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties.

.flex-container {
  display: flex;
  flex-flow: row wrap;
}


The justify-content property is used to align the flex items:
The center value aligns the flex items at the center of the container:
The flex-start value aligns the flex items at the beginning of the container (this is default):
The flex-end value aligns the flex items at the end of the container:
The space-around value displays the flex items with space before, between, and after the lines:
The space-between value displays the flex items with space between the lines:

The align-items property is used to align the flex items.
The center value aligns the flex items in the middle of the container:
The flex-start value aligns the flex items at the top of the container:
The flex-end value aligns the flex items at the bottom of the container:
The stretch value stretches the flex items to fill the container (this is default):
The baseline value aligns the flex items such as their baselines aligns:


The align-content property is used to align the flex lines.
The space-between value displays the flex lines with equal space between them:
The space-around value displays the flex lines with space before, between, and after them:
The stretch value stretches the flex lines to take up the remaining space (this is default):
The center value displays display the flex lines in the middle of the container:
The flex-start value displays the flex lines at the start of the container:
The flex-end value displays the flex lines at the end of the container: 


Perfect Centering
In the following example we will solve a very common style problem: perfect centering.
SOLUTION: Set both the justify-content and align-items properties to center, and the flex item will be perfectly centered:


The CSS Flexbox Container Properties
The following table lists all the CSS Flexbox Container properties:

Property	            Description
align-content	        Modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it aligns flex lines
align-items	            Vertically aligns the flex items when the items do not use all available space on the cross-axis
display	                Specifies the type of box used for an HTML element
flex-direction	        Specifies the direction of the flexible items inside a flex container
flex-flow	            A shorthand property for flex-direction and flex-wrap
flex-wrap	            Specifies whether the flex items should wrap or not, if there is not enough room for them on one flex line
justify-content	        Horizontally aligns the flex items when the items do not use all available space on the main-axis



Child Elements (Items)
The direct child elements of a flex container automatically becomes flexible (flex) items.

The flex item properties are:

order
flex-grow
flex-shrink
flex-basis
flex
align-self

The order property specifies the order of the flex items.
The order property can change the order of the flex items:

The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items.
The value must be a number, default value is 0.
example
p1 -> flex-grow: 3
p2 -> flex-grow: 2
p3 -> flex-grow: 5

Browser adds 3+2+5= 10 and separates the screen width into 10 equal smaller pieces. Then assigns
the pieces to p elements due to flex-grow values.

The flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex items.
The value must be a number, default value is 1.

The flex-basis property specifies the initial length of a flex item.

The flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties.

The align-self Property
The align-self property specifies the alignment for the selected item inside the flexible container.

The align-self property overrides the default alignment set by the container's align-items property.

*/


.class1{
    border: 2px solid black;
    background-color: green;
    color: white;
    width: 200px;
    height: 200px;
    order: 2;
    flex-grow: 2;
}

.class2{
    border: 2px solid black;
    background-color: yellow;
    color: black;
    width: 200px;
    height: 200px;
    order: 1;
    flex-grow: 1;
}

.class3{
    border: 2px solid black;
    background-color: red;
    color: white;
    width: 200px;
    height: 200px;
    order: 0;
    flex-grow: 4;
}

.flex-container{
    display: flex;
    height: 400px;
    /* flex-direction: column; */
    /* flex-direction: column-reverse; */
    /* flex-wrap: wrap; */
    /* justify-content: flex-end; */
    justify-content: flex-start;
    align-items: center;

}


/*
The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.
A grid layout consists of a parent element, with one or more child elements.

An HTML element becomes a grid container when its display property is set to grid or inline-grid.
All direct children of the grid container automatically become grid items.

The vertical lines of grid items are called columns.
The horizontal lines of grid items are called rows.

The spaces between each column/row are called gaps.

You can adjust the gap size by using one of the following properties:

column-gap
row-gap
gap

The gap property is a shorthand property for the row-gap and the column-gap properties:

The gap property can also be used to set both the row gap and the column gap in one value:

Grid Lines
The lines between columns are called column lines.

The lines between rows are called row lines.


Refer to line numbers when placing a grid item in a grid container:

Example
Place a grid item at column line 1, and let it end on column line 3:

.item1 {
  grid-column-start: 1;
  grid-column-end: 3;
}


Place a grid item at row line 1, and let it end on row line 3:


All CSS Grid Properties
Property	            Description
column-gap	            Specifies the gap between the columns
gap	                    A shorthand property for the row-gap and the column-gap properties
grid	                A shorthand property for the grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and the grid-auto-flow properties
grid-area	            Either specifies a name for the grid item, or this property is a shorthand property for the grid-row-start, grid-column-start, grid-row-end, and grid-column-end properties
grid-auto-columns	    Specifies a default column size
grid-auto-flow	        Specifies how auto-placed items are inserted in the grid
grid-auto-rows	        Specifies a default row size
grid-column	            A shorthand property for the grid-column-start and the grid-column-end properties
grid-column-end	        Specifies where to end the grid item
grid-column-gap	        Specifies the size of the gap between columns
grid-column-start	    Specifies where to start the grid item
grid-gap	            A shorthand property for the grid-row-gap and grid-column-gap properties
grid-row	            A shorthand property for the grid-row-start and the grid-row-end properties
grid-row-end	        Specifies where to end the grid item
grid-row-gap	        Specifies the size of the gap between rows
grid-row-start	        Specifies where to start the grid item
grid-template	        A shorthand property for the grid-template-rows, grid-template-columns and grid-areas properties
grid-template-areas	    Specifies how to display columns and rows, using named grid items
grid-template-columns	Specifies the size of the columns, and how many columns in a grid layout
grid-template-rows	    Specifies the size of the rows in a grid layout
row-gap	                Specifies the gap between the grid rows



Grid Container
To make an HTML element behave as a grid container, you have to set the display property to grid or inline-grid.

Grid containers consist of grid items, placed inside columns and rows.

The grid-template-columns Property
The grid-template-columns property defines the number of columns in your grid layout, and it can define the width of each column.

The value is a space-separated-list, where each value defines the width of the respective column.

If you want your grid layout to contain 4 columns, specify the width of the 4 columns, or "auto" if all columns should have the same width.

Example
Make a grid with 4 columns:

.grid-container {
  display: grid;
  grid-template-columns: auto auto auto auto;
}

Note: If you have more than 4 items in a 4 columns grid, the grid will automatically add a new row to put the items in.

The grid-template-columns property can also be used to specify the size (width) of the columns.

Example
Set a size for the 4 columns:

.grid-container {
  display: grid;
  grid-template-columns: 80px 200px auto 40px;
}

The grid-template-rows Property
The grid-template-rows property defines the height of each row.

The value is a space-separated-list, where each value defines the height of the respective row:

Example
.grid-container {
  display: grid;
  grid-template-rows: 80px 200px;
}

The justify-content property is used to align the whole grid inside the container.

Note: The grid's total width has to be less than the container's width for the justify-content property to have any effect.

The align-content property is used to vertically align the whole grid inside the container.

Note: The grid's total height has to be less than the container's height for the align-content property to have any effect.


Child Elements (Items)
A grid container contains grid items.

By default, a container has one grid item for each column, in each row, but you can style the grid items so that they will span multiple columns and/or rows.

The grid-column Property:
The grid-column property defines on which column(s) to place an item.

You define where the item will start, and where the item will end.

Note: The grid-column property is a shorthand property for the grid-column-start and the grid-column-end properties.

To place an item, you can refer to line numbers, or use the keyword "span" to define how many columns the item will span.


Make "item1" start on column 1 and end before column 5:

.item1 {
  grid-column: 1 / 5;
}

Make "item1" start on column 1 and span 3 columns:

.item1 {
  grid-column: 1 / span 3;
}


The grid-row property defines on which row to place an item.

You define where the item will start, and where the item will end.


The grid-row Property:
The grid-row property defines on which row to place an item.

You define where the item will start, and where the item will end.
Note: The grid-row property is a shorthand property for the grid-row-start and the grid-row-end properties.


The grid-area Property
The grid-area property can be used as a shorthand property for the grid-row-start, grid-column-start, grid-row-end and the grid-column-end properties.

Make "item8" start on row-line 1 and column-line 2, and end on row-line 5 and column line 6:

.item8 {
  grid-area: 1 / 2 / 5 / 6;
}


Make "item8" start on row-line 2 and column-line 1, and span 2 rows and 3 columns:

.item8 {
  grid-area: 2 / 1 / span 2 / span 3;
}


The grid-area property can also be used to assign names to grid items.

Named grid items can be referred to by the grid-template-areas property of the grid container.


Item1 gets the name "myArea" and spans all five columns in a five columns grid layout:

.item1 {
  grid-area: myArea;
}
.grid-container {
  grid-template-areas: 'myArea myArea myArea myArea myArea';
}


Each row is defined by apostrophes (' ')

The columns in each row is defined inside the apostrophes, separated by a space.

Note: A period sign represents a grid item with no name.


*/