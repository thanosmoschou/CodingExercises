Maven:
Build tool. Automate compilation.
It downloads the dependencies for us. In a simple java project for example in eclipse, we downloaded all the jars
and we added them as external libraries to the project. Now we do not need to do that.
It downloads all the required dependencies from mvnrepository.com

Basic concepts:
Project Object Model (POM):
It refers to the XML files that have all the information regarding project and configuration details.
It has a description of the project, details regarding the versioning and configuration management of the project.
The XML file is stored in the project's home directory. Maven searches for POM in the current directory when any task it to be executed.

------
Dependencies and repositories:
Dependencies refer to Java Libraries that are needed for the project.
Repositories refer to the directories of the packaged JAR files.
For any repository, Maven searches the local repository, then the remote and last the central repository.
If it will not find a library in the local repo, it will download it from a remote repo and cache it to the local repo.
------
Build Lifecycles, phases and goals:
Build Lifecycles: Consist of a sequence of build phases and each build phase consists of a sequence of goals
Each goal is responsible for a particular task.
When a phase is run, all the goals related to that phase and its plugins are also compiled.
-------
Build profiles:
Refer to the set of configuration values, that are required to build a project using different configurations.
Different build profiles are added to the POM files when enabling different builds.
A build profile helps in customizing build for different enviromnents.


Maven architecture
Read pom.xml file
Download dependencies defined in pom.xml into local repository from central repository.
Create and generate a report according to the requirements, and execute life-cycles, phases, goals, plugins etc.

Maven Build Life Cycle
Is a collection of steps that are to be followed to build a project.
3 build-in life cycles:
Default: Handles project deployment
Clean: Handles project cleaning
Site: Handles the creation of project site's documentation

The Build Life Cycle has different build phases or stages:
Validate the xml validity->Compile->Test->Package->Integration-Test->Verify->Install->Deploy

A Build Lifecycle is Made Up of Phases
Each of these build lifecycles is defined by a different list of build phases, wherein a build phase represents a stage in the lifecycle.

For example, the default lifecycle comprises of the following phases (for a complete list of the lifecycle phases, refer to the Lifecycle Reference):

validate - validate the project is correct and all necessary information is available
compile - compile the source code of the project
test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package - take the compiled code and package it in its distributable format, such as a JAR.
verify - run any checks on results of integration tests to ensure quality criteria are met
install - install the package into the local repository, for use as a dependency in other projects locally
deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.
These lifecycle phases (plus the other lifecycle phases not shown here) are executed sequentially to complete the default lifecycle. Given the lifecycle phases above, this means that when the default lifecycle is used, Maven will first validate the project, then will try to compile the sources, run those against the tests, package the binaries (e.g. jar), run integration tests against that package, verify the integration tests, install the verified package to the local repository, then deploy the installed package to a remote repository.


Project Structure:

Project's Folder
	src
		main
			java
			resources
		test
			java
	target
	pom.xml

src: The root folder of the source code and the application unit tests.
src/main/java: It contains the source code.
src/main/resources: It contains all the static files needed for the project. (Any files we want to read) If I create a web app
this folder will contain all the static files for example html, css, js files.
src/test/java: This folder contains all the tests for the project.
pom.xml: It contains all the metadata of the project dependencies.
target: It stores all the java compiled class files

---------
pom.xml

It contails metadata. For example

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>learnMaven</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

</project>

groupId: Unique identifier of the project
artifactId: Project's name
version: Unique number that identifies the version of our artifact

How to add a dependency:

In the pom.xml file, all the dependencies come to a section called 

<dependencies>
        
</dependencies>

Inside this element we add all the needed dependencies just like this:

<dependency>
	<groupId>Something here</groupId>
        <artifactId>Something here</artifactId>
        <version>Something here</version>
</dependency>

Go to mvnrepository.com and search what you want.
For example Gson for json files handling.
Click on the wanted library. In the central part of the screen you can see some versions. Click on the wanted version.
You can see the <dependency> tag that you will add to your pom.xml file.

<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.10.1</version>
</dependency>
 
Now that I added this to my pom.xml file I need to force the maven to install it. If I am on IntelliJ
I can click on the maven icon on the right and it will install everything for me. If I am on eclipse I can click on 
save and it will download the dependency.
If I do not want a dependency anymore, I can delete the <dependency> from the pom.xml file. On eclipse click save and it will delete
the downloaded jar file.

Some dependencies have other dependencies included. Sometimes it will be a conflict because several dependencies contain the same dependency. I need to exclude some dependency manually. I can type the following:

Inside the dependency I want to exclude a certain transitive dependency:
<exclusions>
        <exclusion>
	    <groupId>Something</groupId>
	    <artifactId>Something</artifactId>
	</exclusion>
</exclusions>

For example:
<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.10.1</version>
    <exclusions>
        <exclusion>
	    <groupId>Something</groupId>
	    <artifactId>Something</artifactId>
	</exclusion>
    </exclusions>
</dependency>


-------------------------
SNAPSHOT & RELEASE DEPENDENCIES

Snapshot:
Created when software is under construction
Unstable

Release:
Created after software is developed and ready for release
Stable

-------------------------
Dependency Scope
Dependency scope is used to limit the transitivity of a dependency and to determine when a dependency is included in a classpath.

There are 6 scopes:

compile
This is the default scope, used if none is specified. Compile dependencies are available in all classpaths of a project. Furthermore, those dependencies are propagated to dependent projects.

provided
This is much like compile, but indicates you expect the JDK or a container to provide the dependency at runtime. For example, when building a web application for the Java Enterprise Edition, you would set the dependency on the Servlet API and related Java EE APIs to scope provided because the web container provides those classes. A dependency with this scope is added to the classpath used for compilation and test, but not the runtime classpath. It is not transitive.

runtime
This scope indicates that the dependency is not required for compilation, but is for execution. Maven includes a dependency with this scope in the runtime and test classpaths, but not the compile classpath.

test
This scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases. This scope is not transitive. Typically this scope is used for test libraries such as JUnit and Mockito. It is also used for non-test libraries such as Apache Commons IO if those libraries are used in unit tests (src/test/java) but not in the model code (src/main/java).

system
This scope is similar to provided except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository.

import
This scope is only supported on a dependency of type pom in the <dependencyManagement> section. It indicates the dependency is to be replaced with the effective list of dependencies in the specified POM's <dependencyManagement> section. Since they are replaced, dependencies with a scope of import do not actually participate in limiting the transitivity of a dependency.

Each of the scopes (except for import) affects transitive dependencies in different ways, as is demonstrated in the table below. If a dependency is set to the scope in the left column, a transitive dependency of that dependency with the scope across the top row results in a dependency in the main project with the scope listed at the intersection. If no scope is listed, it means the dependency is omitted.

-------------------------------

